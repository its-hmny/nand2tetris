// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {

    field int size; // the size of the buffer (and upperbound to the string size)
    field Array buffer; // the string's raw bytes

    /** 
     *  constructs a new empty string with a maximum length of
     *  'maxLength' and initial length of 0.
     */
    constructor String new(int maxLength) {
        let size = maxLength;
        let buffer = Memory.alloc(maxLength);
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do Memory.deAlloc(buffer);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        var int len; let len = 0;
        while (~(buffer[len] = 0)) { let len = len + 1; }
        return Math.min(len, size);
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        // Out of bounds access to the string
        if ((j < 0) | ((j > length()) | (j = length()))) { return 0; }

        return buffer[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        // Out of bounds access to the string
        if ((j < 0) | ((j > length()) | (j = length()))) { return; }

        let buffer[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        var int len; let len = length();
        if (len < size) { let buffer[len] = c; }
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        var int len; let len = length();
        if (len > 0) { let buffer[len - 1] = 0; }
        return;
    }

    /** Returns the integer value of this string, until a non-digit character is detected. */
    method int intValue() {
        var int i, val, sign; let i = 0; let val = 0; let sign = 1;

        // Skips the 1st char when 'parsing' and set the sign to negative
        if (buffer[0] = 45) {
            let i = 1; let sign = -1;
        }
        
        // '/' and ':' are the ASCII codes for 47 and 58, respectively,
        // we can use them to check the range of digits is between 0 and 9
        while ((i < length()) & ((charAt(i) > 47) & (charAt(i) < 58))) {
            let val = (val * 10) + (charAt(i) - 48);
            let i = i + 1;
        }

        return sign * val;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var int i; let i = length() - 1;
        while ((i > 0) | (i = 0)) { let buffer[i] = 0; let i = i - 1; } // Wipes the previous string

        if (val < 0) { do appendChar(45); } // Set the first char of the string to '-'
        
        do setPositiveInt(Math.abs(val));  // Starts writing the positive part
        return;
    }

    // Helper method  to convert an int to string
    method void setPositiveInt(int val) {
        // A poor-man remainder op (read it as val % 10)
        var int digit, tmp;

        if (val < 10) {
            do appendChar(val + 48); // Converts the digit to its ASCII code
            return; // No need to continue if the value is just a single digit
        } else {
            do setPositiveInt(val / 10); // Recursively call to set the next digit
        } 

        let digit = val - ((val / 10) * 10);
        do appendChar(digit + 48); // append the current digit as a char
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128; // ASCII code for newline
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129; // ASCII code for backspace
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34; // ASCII code for double quote
    }
}
