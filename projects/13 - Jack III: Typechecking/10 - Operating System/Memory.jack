// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {

    static Array ram; // The ram (also base pointer) of the heap
    static Array heap; // The ram (also base pointer) of the heap

    /** Initializes the class. */
    function void init() {
        let ram = 0; let heap = 2048;
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        // Out of bounds access to the heap
        // if ((address + 2048) < 2048 | (address + 2048) > 16384) { return 0; }
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        // Out of bounds access zto the heap
        // if ((address + 2048) < 2048 | (address + 2048) > 16384) { return; }
        let ram[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns a reference to its base address. */
    function int alloc(int size) {
        var int pointer; let pointer = heap; // TODO (hmny): This just a temporary bump allocator a more long term solution will come in due time
        let heap = heap + size;
        return pointer;
    }

    /** De-allocates the given object (cast as an array) by making it available for future allocations. */
    function void deAlloc(Array o) {
        return;
    }    
}
