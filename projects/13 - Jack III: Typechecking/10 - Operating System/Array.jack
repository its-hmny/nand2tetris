// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Array.jack

/**
 * Represents an array.
 * In the Jack language, arrays are instances of the Array class.
 * Once declared, the array entries can be accessed using the usual
 * syntax arr[i]. Each array entry can hold a primitive data type as 
 * well as any object type. Different array entries can have different 
 * data types.
 */
class Array {

    /** Constructs a new Array of the given size. */
    function Array new(int size) {
        return [Array]Memory.alloc(size);
    }

    /** Disposes this array. */
    method void dispose() {
        // The conversion here is required because the compiler assumes the class is an (Object, "Array")
        // while the Memory.deAlloc method expects an (Array, "") datatype. There's no real workaround for
        // this situation in my opinion given the fact that  we're implementing low level primitive for the
        // Jack language into itself w/o having in place the proper abstractions (the boundary between the
        // language and the operating system are way too thin and sometimes even overlapping) 
        do Memory.deAlloc([Array]this);
        return;
    }
}
