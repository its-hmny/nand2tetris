// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/PC.hdl

/**
 * A 16-bit counter with increment, load, and reset modes.
 * if      (inc(t) == 1)   out(t+1) = out(t) + 1
 * else if (load(t) == 1)  out(t+1) = in(t)
 * else if (reset(t) == 1) out(t+1) = 0
 * else                    out(t+1) = out(t).
 *
 * To select a mode, assert the relevant control bit,
 * and de-assert the other two bits. 
 */
CHIP PC {
    IN in[16], inc, load, reset;
    OUT out[16];

    PARTS: // Available gate(s): Logic and arithmetic gates + DFF + Bit + Register + RAM8 + RAM64
    // We proces the the bit sequence to write through a pipeline of transformations, each
    // transformation has to be pass to the next step by its mode bit else it's discarded.
    // - Step 1: Increment the previous 'out' value
    Inc16(in=ToSave, out=Inc16Out);
    Mux16(a=in, b=Inc16Out, sel=inc, out=Step1);
    // - Step 2: Overwrite value with current 'in'
    Mux16(a=Step1, b=in, sel=load, out=Step2);
    // - Step 3: Overwrite with a zeroed bit strem
    Mux16(a=Step2, b=false, sel=reset, out=Step3);

    // If either 'inc', 'load' or 'reset' are true we must store a new value in the register. 
    Or(a=inc, b=load, out=IsIncOrLoad);
    Or(a=IsIncOrLoad, b=reset, out=IsWriteOp);

    Register(in=Step3, load=IsWriteOp, out=out, out=ToSave);
}
