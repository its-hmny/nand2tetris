class Grid {
    field Array cells; // 0 = empty, 1 = player X, 2 = player O
    field int x, y, line, cell;

    constructor Grid new(int lineStroke, int cellSize) {
        var int r;  let r = (lineStroke * 2) + ((cellSize * 3) / 2);
        
        let cells = Array.new(9);
        let x = 256 + r; let y = 128 - 20 + r; // The initial coords to draw the grid at
        let line = lineStroke; let cell = cellSize; // Cell width and line stroke settings

        return this;
    }

    method int getCell(int row, int col) { return cells[(row * 3) + col]; }

    method void setCell(int row, int col, int player) {
        let cells[(row * 3) + col] = player;
        return;
    }

    method void render() {
        var int row, col, player;

        do Screen.drawRectangle(  x - line,               y - (cell * 3),         x,               y  );
        do Screen.drawRectangle(  x - line - cell,        y - (cell * 3),         x - cell,        y  );
        do Screen.drawRectangle(  x - line - (cell * 2),  y - (cell * 3),         x - (cell * 2),  y  );
        do Screen.drawRectangle(  x - line - (cell * 3),  y - (cell * 3),  x - (cell * 3),  y  );

        do Screen.drawRectangle(  x - (cell * 3),  y - line,               x,  y               );
        do Screen.drawRectangle(  x - (cell * 3),  y - line - cell,        x,  y - cell        );
        do Screen.drawRectangle(  x - (cell * 3),  y - line - (cell * 2),  x,  y - (cell * 2)  );
        do Screen.drawRectangle(  x - (cell * 3),  y - line - (cell * 3),  x,  y - (cell * 3)  );
        
        

        let row = 0; while (row < 3) {
            let col = 0; while (col < 3) {
                let player = getCell(row, col);
        
                if (player = 1) { do renderPlayer1(row - 1, col - 1); }
                if (player = 2) { do renderPlayer2(row - 1, col - 1); }

                let col = col + 1;
            }

            let row = row + 1;
        } 

        return;
    }

    method void renderPlayer1(int row, int col) {
        var int sx, sy; let sx = 256 + (row * cell); let sy = (128 - 20) + (col * cell);
        do Screen.drawLine(sx - 10 , sy - 10, sx + 10 , sy + 10);
        do Screen.drawLine(sx - 10 , sy + 10, sx + 10 , sy - 10);

        return;
    }
    
    method void renderPlayer2(int row, int col) {
        var int sx, sy; let sx = 256 + (row * cell); let sy = (128 - 20) + (col * cell);
        do Screen.drawCircle(sx, sy, 10);
        
        return;
    }
}
